---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "StoryTeller - Infrastructure"
  Author:
    Description: "Stuart Fox"

Parameters:
  DebugFunctionBool:
    Type: String
  HostedZone:
    Type: String
  WebsiteName:
    Type: String
  DomainName:
    Type: String
  APIName:
    Type: String
  LambdaBucket:
    Type: String
  
Conditions:
  DeployDebugFunction:
    Fn::Equals: [ true, !Ref DebugFunctionBool ]

Resources:
  ## DynamoDB Table
  StoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      #TableName: !Sub "${AWS::StackName}-data"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "GSIPK1"
          AttributeType: "S"
        - AttributeName: "ageRange"
          AttributeType: "S"
        - AttributeName: "author"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes: 
        - IndexName: "ListOfStories"
          KeySchema:
            - AttributeName: "GSIPK1"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "title"
              - "tags"
              - "author"
              - "ageRange"
              - "views"
            ProjectionType: "INCLUDE"
        - IndexName: "GroupStoriesByAgeRangeIndex"
          KeySchema:
            - AttributeName: "ageRange"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "title"
              - "tags"
              - "author"
              - "views"
            ProjectionType: "INCLUDE"
        - IndexName: "GroupStoriesByAuthorIndex"
          KeySchema:
            - AttributeName: "author"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "title"
              - "tags"
              - "ageRange"
              - "views"
            ProjectionType: "INCLUDE"

  ## Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolTags:
        stack-name: !Sub ${AWS::StackName}
      #UserPoolName: !Sub ${AWS::StackName}-UserPool
      AliasAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-apigateway
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref UserPool

  ## Route53 Config Section
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub ${APIName}.${DomainName}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt HttpApiDomainName.RegionalHostedZoneId
        DNSName: !GetAtt HttpApiDomainName.RegionalDomainName

  ## ACM Cert Config Section
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      DomainName: !Sub ${APIName}.${DomainName}
      ValidationMethod: DNS

  CloudFrontCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      DomainName: !Sub ${WebsiteName}.${DomainName}
      ValidationMethod: DNS

  ## API Gateway V2
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Tags:
        stack-name: !Sub ${AWS::StackName}
      Name: Story Teller API
      Description: Story Teller API
      ProtocolType: HTTP
      DisableExecuteApiEndpoint: True

  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-JwtAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: $default

  HttpApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      Tags:
        stack-name: !Sub ${AWS::StackName}
      DomainName: !Sub "${APIName}.${DomainName}"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref APICertificate

  HttpApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - HttpApiDomainName
      - HttpApi
      - HttpApiStage
    Properties:
      DomainName: !Ref HttpApiDomainName
      ApiId: !Ref HttpApi
      Stage: !Ref HttpApiStage

  HttpApiDebugRoute:
    Condition: DeployDebugFunction
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/secret/debug"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      OperationName: Debug
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpDebugIntegration
        
  HttpDebugIntegration:
    Condition: DeployDebugFunction
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Debug Integration
      PayloadFormatVersion: 2.0
      IntegrationType: AWS_PROXY
      TimeoutInMillis: 500
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DebugFunction.Arn}/invocations

  HttpApiStoriesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/story"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpStoryIntegration

  HttpApiStoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/story/{id}"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpStoryIntegration
  
  HttpStoryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Story Integration
      PayloadFormatVersion: 2.0
      IntegrationType: AWS_PROXY
      TimeoutInMillis: 500
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DebugFunction.Arn}/invocations

  ## Lambda Functions
  DebugFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      RoleName: !Sub "${AWS::StackName}-DebugFunctionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*

  DebugFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      Handler: index.handler
      Runtime: python3.7
      Timeout: 1
      TracingConfig:
        Mode: Active
      Role: !GetAtt DebugFunctionRole.Arn
      Environment:
        Variables:
          STORIES_TABLE: !Ref StoriesTable
      Code:
        ZipFile: |
          import json
          def handler(event, context):
            message = json.dumps(event, indent=2)
            return message

  DebugFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DebugFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*

  StoryFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      RoleName: !Sub "${AWS::StackName}-StoryFunctionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - dynamodb:*
            Resource: 
              - arn:aws:logs:*:*:*
              - !GetAtt StoriesTable

  StoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      Handler: index.handler
      Runtime: python3.8
      Timeout: 1
      TracingConfig:
        Mode: Active
      Role: !GetAtt StoryFunctionRole.Arn
      Environment:
        Variables:
          STORIES_TABLE: !Ref StoriesTable
      Code:
        S3Bucket: !Sub ${LambdaBucket}
        S3Key: lambdas/story/story.zip

  StoryFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StoryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*

  XRayAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-XRayAccess"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
            - xray:GetSamplingRules
            - xray:GetSamplingTargets
            - xray:PutTraceSegments
          Resource: 
          - "*"
      Roles:
        - !Ref DebugFunctionRole