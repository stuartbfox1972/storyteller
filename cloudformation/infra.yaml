---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "StoryTeller - Infrastructure"
  Author:
    Description: "Stuart Fox"

Parameters:
  HostedZone:
    Type: String
  WebsiteName:
    Type: String
  DomainName:
    Type: String
  APIName:
    Type: String
  LambdaBucket:
    Type: String
  LambdaVersion:
    Type: String
  StaticAssetsBucket:
    Type: String

Resources:
  ## DynamoDB Table
  StoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
        - AttributeName: "GSIPK1"
          AttributeType: "S"
        - AttributeName: "ageRange"
          AttributeType: "S"
        - AttributeName: "author"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes: 
        - IndexName: "ListOfStories"
          KeySchema:
            - AttributeName: "GSIPK1"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "ageRange"
              - "author"
              - "storyId"
              - "title"
              - "tags"
              - "views"
            ProjectionType: "INCLUDE"
        - IndexName: "GroupStoriesByAgeRangeIndex"
          KeySchema:
            - AttributeName: "ageRange"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "author"
              - "storyId"
              - "tags"
              - "title"
              - "views"
            ProjectionType: "INCLUDE"
        - IndexName: "GroupStoriesByAuthorIndex"
          KeySchema:
            - AttributeName: "author"
              KeyType: "HASH"
          Projection:
            NonKeyAttributes:
              - "ageRange"
              - "storyId"
              - "tags"
              - "title"
              - "views"
            ProjectionType: "INCLUDE"

  ## Cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolTags:
        stack-name: !Sub ${AWS::StackName}
      AliasAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1

  ApiUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-apigateway
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref UserPool

  FrontendUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: cognito-frontend
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      UserPoolId: !Ref UserPool

  ## Route53 Config Section
  ApiDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub ${APIName}.${DomainName}
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt HttpApiDomainName.RegionalHostedZoneId
        DNSName: !GetAtt HttpApiDomainName.RegionalDomainName

  WebDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Name: !Sub ${WebsiteName}.${DomainName}
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  ## ACM Cert Config Section
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      DomainName: !Sub ${APIName}.${DomainName}
      ValidationMethod: DNS

  CloudFrontCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      DomainName: !Sub ${WebsiteName}.${DomainName}
      ValidationMethod: DNS

  ## API Gateway V2
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Tags:
        stack-name: !Sub ${AWS::StackName}
      Name: Story Teller API
      Description: Story Teller API
      ProtocolType: HTTP
      DisableExecuteApiEndpoint: True

  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-JwtAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - "$request.header.Authorization"
      JwtConfiguration:
        Audience:
          - !Ref ApiUserPoolClient
          - !Ref FrontendUserPoolClient
        Issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: $default

  HttpApiDomainName:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      Tags:
        stack-name: !Sub ${AWS::StackName}
      DomainName: !Sub "${APIName}.${DomainName}"
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref APICertificate

  HttpApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    DependsOn:
      - HttpApiDomainName
      - HttpApi
      - HttpApiStage
    Properties:
      DomainName: !Ref HttpApiDomainName
      ApiId: !Ref HttpApi
      Stage: !Ref HttpApiStage

  HttpDebugRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/debug"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpDebugIntegration

  HttpApiStoriesRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/story"
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpStoryIntegration

  HttpApiStoryRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/story/{storyId}"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpStoryIntegration

  HttpApiParagraphRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/story/{storyId}/{paragraphId}"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpStoryIntegration

  HttpApiProfileRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/profile"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpProfileIntegration

  HttpApiProfileUpdateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /api/v1.0/profile"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpProfileIntegration

  HttpApiAllProgressRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/profile/progress"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpProfileIntegration

  HttpApiGetProgressRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /api/v1.0/profile/progress/{storyId}"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpProfileIntegration

  HttpApiPostProgressRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "POST /api/v1.0/profile/progress/{storyId}"
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref HttpProfileIntegration
  
  HttpStoryIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Story Integration
      PayloadFormatVersion: 2.0
      IntegrationType: AWS_PROXY
      TimeoutInMillis: 5000
      IntegrationUri:
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoryFunction.Arn}/invocations

  HttpDebugIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Debug Integration
      PayloadFormatVersion: 2.0
      IntegrationType: AWS_PROXY
      TimeoutInMillis: 5000
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DebugFunction.Arn}/invocations

  HttpProfileIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: Profile Integration
      PayloadFormatVersion: 2.0
      IntegrationType: AWS_PROXY
      TimeoutInMillis: 1500
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ProfileFunction.Arn}/invocations

  DDBXrayFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      RoleName: !Sub "${AWS::StackName}-FullFunctionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
      - PolicyName: logsanddynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:*
              - dynamodb:*
            Resource: 
              - arn:aws:logs:*:*:*
              - !GetAtt StoriesTable.Arn
      - PolicyName: getaccountsettings
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - lambda:GetAccountSettings
            Resource: 
              - "*"

  StoryFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      Handler: story.story_handler
      Runtime: python3.8
      Timeout: 4
      TracingConfig:
        Mode: Active
      Role: !GetAtt DDBXrayFunctionRole.Arn
      Environment:
        Variables:
          STORIES_TABLE: !Ref StoriesTable
      Code:
        S3Bucket: !Sub ${LambdaBucket}
        S3Key: !Sub lambdas/story/story-${LambdaVersion}.zip

  StoryFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StoryFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*
  
  DebugFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      RoleName: !Sub "${AWS::StackName}-DebugFunctionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:*
            Resource: 
              - arn:aws:logs:*:*:*

  DebugFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      Handler: debug.debug_handler
      Runtime: python3.8
      Timeout: 4
      Role: !GetAtt DebugFunctionRole.Arn
      Code:
        S3Bucket: !Sub ${LambdaBucket}
        S3Key: !Sub lambdas/debug/debug-${LambdaVersion}.zip

  DebugFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DebugFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*

  ProfileFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      RoleName: !Sub "${AWS::StackName}-ProfileFunctionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:*
            Resource: 
              - arn:aws:logs:*:*:*

  ProfileFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "stack-name"
          Value: !Sub ${AWS::StackName}
      Handler: profile.profile_handler
      Runtime: python3.8
      Timeout: 4
      TracingConfig:
        Mode: Active
      Role: !GetAtt DDBXrayFunctionRole.Arn
      Environment:
        Variables:
          STORIES_TABLE: !Ref StoriesTable
      Code:
        S3Bucket: !Sub ${LambdaBucket}
        S3Key: !Sub lambdas/profile/profile-${LambdaVersion}.zip

  ProfileFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProfileFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssetsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub arn:aws:s3:::${StaticAssetsBucket}/*

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub ${WebsiteName}.${DomainName}
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Sub ${StaticAssetsBucket}.s3.${AWS::Region}.amazonaws.com
            Id: S3-private-bucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginIdentity}
        Enabled: 'true'
        Comment: Some comment
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: S3-private-bucket
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudFrontCertificate
          MinimumProtocolVersion: 'TLSv1.2_2019'
          SslSupportMethod: 'sni-only'