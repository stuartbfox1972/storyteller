---
AWSTemplateFormatVersion: "2010-09-09"

Description: "**WARNING** You will be billed for the AWS resources used if you create a stack from this template"

Metadata:
  About:
    Description: "Story Teller"
  Author:
    Description: "Stuart Fox"

Resources:
# Roles, Policies and Permissions 
  StoryTellerLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub "${AWS::StackName}-StoryTellerLambdaPolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
        - Effect: Allow
          Action: 
          - dynamodb:*
          Resource:
          - !GetAtt StoriesTable.Arn
        - Effect: Allow
          Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
          Resource: "*"
      Roles:
        - !Ref StoryTellerLambdaRole

  APIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: execution
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: 
            - !GetAtt StoriesLambdaFunction.Arn

  StoryTellerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-StoryTellerLambdaRole"
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com

  StoriesLambdaGateWayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StoriesLambdaFunction.Arn
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Join ["", ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": ApiGatewayRestApi}, "/*/*/*"]]
      #SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/*/*/*, __ApiId__: !Ref ApiGatewayRestApi

# DynamoDB Tables
  StoriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-paragraphs"
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH"
        - AttributeName: "sk"
          KeyType: "RANGE"
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
      BillingMode: PAY_PER_REQUEST

# Lambda Functions
  StoriesLambdaFunction:
    DependsOn:
    - StoryTellerLambdaPolicy
    - StoryTellerLambdaRole
    Type: AWS::Lambda::Function
    Properties:
      Handler: storyteller.lambda_handler
      Role: !GetAtt StoryTellerLambdaRole.Arn
      Code:
        S3Bucket: awsfox-lambdafunctions
        S3Key: storyteller.zip
      Runtime: python3.8
      MemorySize: 128
      Timeout: 2
      TracingConfig:
        Mode: Active

# Cognito 
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AliasAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: true
      AccountRecoverySetting:
        RecoveryMechanisms: 
          - Name: verified_email
            Priority: 1
      Policies:        
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-storyteller-web
      GenerateSecret: false
      UserPoolId: !Ref UserPool

# API Gateway
  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-api-access-logs
      RetentionInDays: 1

  ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: !Sub ${AWS::StackName}-storyteller-restapi
        Description: Story Teller ReST API
        Parameters:
          endpointConfigurationTypes: Regional

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-storyteller-restapi-authorizer
      Type: COGNITO_USER_POOLS
      RestApiId: !Ref ApiGatewayRestApi
      ProviderARNs:
      - !GetAtt UserPool.Arn
      IdentitySource: method.request.header.Authorization
    
  StoryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "ApiGatewayRestApi"
      PathPart: "story"
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

  StoryMethod:
    DependsOn: 
      - StoriesLambdaFunction
      - APIGatewayExecutionRole
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      RestApiId: !Ref "ApiGatewayRestApi"
      ResourceId: !Ref StoryResource
      AuthorizerId: !Ref ApiGatewayAuthorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayExecutionRole.Arn
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoriesLambdaFunction.Arn}/invocations

  StoryIDResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref "ApiGatewayRestApi"
      PathPart: "{id}"
      ParentId: !Ref "StoryResource"

  StoryIDMethod:
    DependsOn: 
      - StoriesLambdaFunction
      - APIGatewayExecutionRole
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: "GET"
      RestApiId: !Ref "ApiGatewayRestApi"
      ResourceId: !Ref StoryIDResource
      AuthorizerId: !Ref ApiGatewayAuthorizer
      AuthorizationType: COGNITO_USER_POOLS
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: "POST"
        Credentials: !GetAtt APIGatewayExecutionRole.Arn
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoriesLambdaFunction.Arn}/invocations

  APIDeployment:
    DependsOn: StoryMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref "ApiGatewayRestApi"
      Description: Deploy for dev
      StageName: dev
      StageDescription:
        TracingEnabled: true
        MethodSettings:
          - ResourcePath: '/*'
            HttpMethod: '*'
            LoggingLevel: 'INFO'
            MetricsEnabled: true
            DataTraceEnabled: true
        AccessLogSetting:
          DestinationArn: !GetAtt AccessLogGroup.Arn
          Format: >-
            {"requestId":"$context.requestId", "ip": "$context.identity.sourceIp",
            "caller":"$context.identity.caller",
            "user":"$context.identity.user","requestTime":"$context.requestTime",
            "eventType":"$context.eventType","routeKey":"$context.routeKey",
            "status":"$context.status","connectionId":"$context.connectionId"}

Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient
  apiGatewayInvokeURL:
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  #RestApiURL:
  #  Value: !Ref ApiGatewayRestApi.Arn

          
